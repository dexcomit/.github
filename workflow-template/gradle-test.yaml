name: gradle-java-test

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Fetch org name
        id: org-name
        run: echo "::set-output name=value::$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')"
      # Configure Workload Identity Federation via a credentials file.
      - name: Run Tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            test --info
      - name: SonarQube Scan
        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
        with:
          arguments: |
            --info
            -Dsonar.organization=${{ steps.org-name.outputs.value }}
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.login=${{ secrets.SONARCLOUD_API_KEY }}
            -Dsonar.host.url=${{ secrets.SONARCLOUD_HOST_URL }}
            sonarqube -x test
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_API_KEY }}
          SONAR_HOST_URL: ${{ secrets.SONARCLOUD_HOST_URL }}
        with:
          scanMetadataReportFile: build/sonar/report-task.txt
      - name: Build local docker image
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            --info
            jibDockerBuild
#      - name: Prisma Cloud image scan
#        run: |
#          twistcli images scan
#          --docker-address ${DOCKER_HOST}
#          --address ${{ secrets.PCC_CONSOLE_URL }}
#          --user ${{ secrets.PCC_USER }}
#          --password ${{ secrets.PCC_PASS }}
#          --details gcr.io/p8-integrations/it-account-mdm/account-raw-ingest
#      - name: Prisma Cloud image scan
#        run: |
#          twistcli images scan
#          --docker-address ${DOCKER_HOST}
#          --address ${{ secrets.PCC_CONSOLE_URL }}
#          --user ${{ secrets.PCC_USER }}
#          --password ${{ secrets.PCC_PASS }}
#          --details gcr.io/p8-integrations/it-account-mdm/account-canonical-router
#      - name: Prisma Cloud image scan
#        run: |
#          twistcli images scan
#          --docker-address ${DOCKER_HOST}
#          --address ${{ secrets.PCC_CONSOLE_URL }}
#          --user ${{ secrets.PCC_USER }}
#          --password ${{ secrets.PCC_PASS }}
#          --details gcr.io/p8-integrations/it-account-mdm/account-raw-canonical-validator
#      - name: Prisma Cloud image scan
#        run: |
#          twistcli images scan
#          --docker-address ${DOCKER_HOST}
#          --address ${{ secrets.PCC_CONSOLE_URL }}
#          --user ${{ secrets.PCC_USER }}
#          --password ${{ secrets.PCC_PASS }}
#          --details gcr.io/p8-integrations/it-account-mdm/account-target-systems-mock
      # Remove the image from the Docker VM machine that exposes the socket
      - name: cleanup image
        run: |
          if docker image inspect ${{ steps.image-name.outputs.value }} > /dev/null 2>&1 ; then docker rmi ${{ steps.image-name.outputs.value }}; fi
